openapi: 3.0.1
info:
  title: API Users
  version: 1.0.0
paths:
  /api/users:
    get:
      summary: Obtengo todos los usuarios.
      tags: 
        - Users
      responses:
        200:
          description: Se obtuvieron los usuarios.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        500:
          description: Error interno del servidor.
        400:
          description: Error interno del servidor, usualmente generado por un query defectuoso.
  /api/users/{uid}:
    get:
      summary: Obtengo un usuario por su ID.
      tags: 
        - Users
      parameters:
        - in: path
          name: uid
          schema:
            $type: string
          required: true
          description: ID del usuario.
      responses:
        200:
          description: Se obtuvo el usuario.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        500:
          description: Error interno del servidor.
        400:
          description: Error interno del servidor, usualmente generado por un query defectuoso.
    put:
      summary: Actualizo un usuario por su ID.
      tags: 
        - Users
      parameters:
        - in: path
          name: uid
          schema:
            type: string
          required: true
          description: ID del usuario.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/upadateUser'
      responses:
        200:
          description: Se actualizo el usuario.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        500:
          description: Error interno del servidor.
        400:
          description: Error interno del servidor, usualmente generado por un query defectuoso.
    delete:
      summary: Elimino un usuario por su ID.
      tags: 
        - Users
      parameters:
        - in: path
          name: uid
          schema:
            type: string
          required: true
          description: ID del usuario.
      responses:
        200:
          description: Se elimino el usuario.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        500:
          description: Error interno del servidor.
        400:
          description: Error interno del servidor, usualmente generado por un query defectuoso.
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: ID de mongo del usuario.
        name:
          type: string
          description: Nombre del usuario.
        lastName:
          type: string
          description: Apellido del usuario.
        email:
          type: string
          description: Email del usuario.
        password:
          type: string
          description: Contraseña del usuario.
        birthDate:
          type: Date
          description: Fecha de nacimiento del usuario.
        phone:
          type: string
          description: Teléfono del usuario.
        avatar:
          type: string
          description: Avatar del usuario.
        resetPasswordToken:
          type: string
          description: Token para restablecer la contraseña.
        resetPasswordExpires:
          type: Date
          description: Fecha de expiración del token para restablecer la contraseña.
        cart:
          type: mongoose.Schema.Types.ObjectId
          description: Carrito de compras del usuario.
        rol:
          type: string
          description: Rol del usuario.
      example:
        _id: ObjectId("629e9c9d6e7b7f9d3d6e7b7f")
        name: Juan
        lastName: Perez
        email: juanperez@example.com
        password: 123456
        birthDate: 1990-01-01
        phone: +54 9 123 456 789
        avatar: avatar.jpg
        resetPasswordToken: token
        resetPasswordExpires: 2023-01-01
        cart: ObjectId("629e9c9d6e7b7f9d3d6e7b7f")
        rol: usuario
  requestBodies:
    upadateUser:
      description: Datos del usuario a actualizar.
      properties:
        name:
          type: string
          description: Nombre del usuario.
        lastName:
          type: string
          description: Apellido del usuario.
        email:
          type: string
          description: Email del usuario.
        password:
          type: string
          description: Contraseña del usuario.
        birthDate:
          type: Date
          description: Fecha de nacimiento del usuario.
        phone:
          type: string
          description: Teléfono del usuario.
        avatar:
          type: string
          description: Avatar del usuario.
        resetPasswordToken:
          type: string
          description: Token para restablecer la contraseña.
        resetPasswordExpires:
          type: Date
          description: Fecha de expiración del token para restablecer la contraseña.
        cart:
          type: mongoose.Schema.Types.ObjectId
          description: Carrito de compras del usuario.
        rol:
          type: string
          description: Rol del usuario.
      example:
        name: Juan
        lastName: Perez
        email: juanperez@example.com
        password: 123456
        birthDate: 1990-01-01
        phone: +54 9 123 456 789
        avatar: avatar.jpg
      